import React, { useState, useEffect, useRef } from "react";
import { ReceiverRequest, Donor } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { 
  MapPin, 
  Search, 
  Heart, 
  Phone, 
  Clock,
  Shield,
  Navigation,
  AlertTriangle,
  Users
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

import RequestForm from "../components/blood/RequestForm";
import DonorMap from "../components/blood/DonorMap";
import DonorList from "../components/blood/DonorList";
import RequestStatus from "../components/blood/RequestStatus";

export default function FindBloodPage() {
  const [activeRequest, setActiveRequest] = useState(null);
  const [nearbyDonors, setNearbyDonors] = useState([]);
  const [userLocation, setUserLocation] = useState(null);
  const [loading, setLoading] = useState(false);
  const [locationError, setLocationError] = useState(null);
  const [searchFilters, setSearchFilters] = useState({
    bloodType: '',
    radius: 5000
  });

  useEffect(() => {
    getUserLocation();
    loadNearbyDonors();
  }, []);

  const getUserLocation = () => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation({ lat: latitude, lng: longitude });
          setLocationError(null);
        },
        (error) => {
          console.error("Location error:", error);
          setLocationError("Location access denied. Using default location.");
          // Default to Dhaka, Bangladesh
          setUserLocation({ lat: 23.8103, lng: 90.4125 });
        }
      );
    } else {
      setLocationError("Geolocation not supported by this browser.");
      setUserLocation({ lat: 23.8103, lng: 90.4125 });
    }
  };

  const loadNearbyDonors = async () => {
    setLoading(true);
    try {
      // Get available donors
      const donors = await Donor.filter({ availability: true });
      
      // Filter by location proximity (simplified for demo)
      // In production, use proper geospatial queries
      const availableDonors = donors.filter(donor => 
        donor.location && 
        donor.location.coordinates &&
        donor.lastLocationUpdate &&
        (new Date() - new Date(donor.lastLocationUpdate)) < 24 * 60 * 60 * 1000 // 24 hours
      );

      setNearbyDonors(availableDonors);
    } catch (error) {
      console.error("Error loading donors:", error);
    }
    setLoading(false);
  };

  const handleRequestSubmit = async (requestData) => {
    setLoading(true);
    try {
      const request = await ReceiverRequest.create({
        ...requestData,
        location: {
          type: "Point",
          coordinates: [userLocation.lng, userLocation.lat]
        }
      });
      
      setActiveRequest(request);
      
      // Filter donors by blood type compatibility
      const compatibleDonors = getCompatibleDonors(requestData.bloodType);
      setNearbyDonors(compatibleDonors);
      
    } catch (error) {
      console.error("Error creating request:", error);
    }
    setLoading(false);
  };

  const getCompatibleDonors = (neededType) => {
    const compatibility = {
      'A+': ['A+', 'A-', 'O+', 'O-'],
      'A-': ['A-', 'O-'],
      'B+': ['B+', 'B-', 'O+', 'O-'],
      'B-': ['B-', 'O-'],
      'AB+': ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],
      'AB-': ['A-', 'B-', 'AB-', 'O-'],
      'O+': ['O+', 'O-'],
      'O-': ['O-']
    };

    const compatibleTypes = compatibility[neededType] || [];
    return nearbyDonors.filter(donor => compatibleTypes.includes(donor.bloodType));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <div className="p-6 max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <div className="w-10 h-10 bg-gradient-to-r from-red-500 to-red-600 rounded-xl flex items-center justify-center">
              <Heart className="w-6 h-6 text-white fill-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Find Blood Donors</h1>
              <p className="text-gray-600">Connect with nearby donors instantly</p>
            </div>
          </div>

          {locationError && (
            <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 mb-4">
              <div className="flex items-center gap-2">
                <AlertTriangle className="w-5 h-5 text-amber-600" />
                <p className="text-amber-800 text-sm">{locationError}</p>
              </div>
            </div>
          )}
        </div>

        {!activeRequest ? (
          <div className="grid lg:grid-cols-3 gap-6">
            {/* Request Form */}
            <div className="lg:col-span-1">
              <RequestForm 
                onSubmit={handleRequestSubmit}
                loading={loading}
                userLocation={userLocation}
              />
            </div>

            {/* Map and Donors */}
            <div className="lg:col-span-2 space-y-6">
              <Card className="shadow-lg border-0">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MapPin className="w-5 h-5 text-red-600" />
                    Available Donors Near You
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <DonorMap 
                    donors={nearbyDonors}
                    userLocation={userLocation}
                    loading={loading}
                  />
                </CardContent>
              </Card>

              <DonorList 
                donors={nearbyDonors}
                loading={loading}
                userLocation={userLocation}
              />
            </div>
          </div>
        ) : (
          <RequestStatus 
            request={activeRequest}
            nearbyDonors={nearbyDonors}
            onBack={() => setActiveRequest(null)}
          />
        )}
      </div>
    </div>
  );
}