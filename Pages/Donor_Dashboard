import React, { useState, useEffect } from "react";
import { Donor, Match } from "@/entities/all";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { 
  Heart, 
  MapPin, 
  Phone, 
  Clock,
  CheckCircle,
  XCircle,
  Shield,
  User,
  Activity,
  Bell
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

import DonorProfile from "../components/donor/DonorProfile";
import IncomingRequests from "../components/donor/IncomingRequests";
import DonationHistory from "../components/donor/DonationHistory";

export default function DonorDashboardPage() {
  const [donor, setDonor] = useState(null);
  const [incomingMatches, setIncomingMatches] = useState([]);
  const [isAvailable, setIsAvailable] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadDonorData();
    loadIncomingRequests();
  }, []);

  const loadDonorData = async () => {
    try {
      // In production, get current user's donor profile
      const donors = await Donor.list();
      const currentDonor = donors[0]; // Mock - get current user's profile
      setDonor(currentDonor);
      setIsAvailable(currentDonor?.availability || false);
    } catch (error) {
      console.error("Error loading donor data:", error);
    }
    setLoading(false);
  };

  const loadIncomingRequests = async () => {
    try {
      // Get pending matches for current donor
      const matches = await Match.filter({ 
        donorId: "current-donor-id", // In production, use actual donor ID
        status: "pending" 
      });
      setIncomingMatches(matches);
    } catch (error) {
      console.error("Error loading matches:", error);
    }
  };

  const handleAvailabilityToggle = async (available) => {
    setIsAvailable(available);
    
    if (donor) {
      try {
        // Update location if turning availability on
        if (available && "geolocation" in navigator) {
          navigator.geolocation.getCurrentPosition(async (position) => {
            const { latitude, longitude } = position.coords;
            await Donor.update(donor.id, {
              availability: available,
              location: {
                type: "Point",
                coordinates: [longitude, latitude]
              },
              lastLocationUpdate: new Date().toISOString()
            });
          });
        } else {
          await Donor.update(donor.id, { availability: available });
        }
      } catch (error) {
        console.error("Error updating availability:", error);
      }
    }
  };

  const handleMatchResponse = async (matchId, response) => {
    try {
      const updateData = {
        status: response,
        [response === "accepted" ? "acceptedAt" : "declinedAt"]: new Date().toISOString()
      };
      
      await Match.update(matchId, updateData);
      loadIncomingRequests(); // Reload matches
    } catch (error) {
      console.error("Error responding to match:", error);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6">
        <div className="max-w-4xl mx-auto">
          <div className="animate-pulse space-y-6">
            <div className="h-8 bg-gray-200 rounded w-64"></div>
            <div className="grid md:grid-cols-2 gap-6">
              <div className="h-96 bg-gray-200 rounded-lg"></div>
              <div className="h-96 bg-gray-200 rounded-lg"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-gradient-to-r from-red-500 to-red-600 rounded-xl flex items-center justify-center">
              <Heart className="w-7 h-7 text-white fill-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Donor Dashboard</h1>
              <p className="text-gray-600">Manage your availability and help save lives</p>
            </div>
          </div>

          {/* Availability Toggle */}
          <Card className="shadow-lg border-0">
            <CardContent className="p-4">
              <div className="flex items-center gap-3">
                <div className={`w-3 h-3 rounded-full ${isAvailable ? 'bg-green-500' : 'bg-gray-400'} animate-pulse`}></div>
                <span className="font-medium text-gray-900">
                  {isAvailable ? 'Available' : 'Not Available'}
                </span>
                <Switch
                  checked={isAvailable}
                  onCheckedChange={handleAvailabilityToggle}
                  className="data-[state=checked]:bg-red-600"
                />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Availability Alert */}
        <AnimatePresence>
          {isAvailable && (
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
            >
              <Card className="bg-green-50 border border-green-200 shadow-sm">
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <CheckCircle className="w-5 h-5 text-green-600" />
                    <div>
                      <p className="font-medium text-green-800">You're now available to help!</p>
                      <p className="text-green-600 text-sm">
                        Your location is being shared with nearby patients in need.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )}
        </AnimatePresence>

        <div className="grid lg:grid-cols-3 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            <DonorProfile donor={donor} onUpdate={loadDonorData} />
            <IncomingRequests 
              matches={incomingMatches}
              onResponse={handleMatchResponse}
            />
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            <DonationHistory donorId={donor?.id} />
            
            {/* Quick Stats */}
            <Card className="shadow-lg border-0">
              <CardHeader>
                <CardTitle className="text-lg">Your Impact</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Heart className="w-4 h-4 text-red-600" />
                    <span className="text-gray-600">Lives Helped</span>
                  </div>
                  <span className="font-bold text-2xl text-red-600">12</span>
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Activity className="w-4 h-4 text-green-600" />
                    <span className="text-gray-600">Response Rate</span>
                  </div>
                  <span className="font-bold text-2xl text-green-600">95%</span>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-blue-600" />
                    <span className="text-gray-600">Avg Response</span>
                  </div>
                  <span className="font-bold text-2xl text-blue-600">3m</span>
                </div>
              </CardContent>
            </Card>

            {/* Verification Status */}
            <Card className="shadow-lg border-0">
              <CardHeader>
                <CardTitle className="text-lg">Verification Status</CardTitle>
              </CardHeader>
              <CardContent>
                {donor?.verified ? (
                  <div className="flex items-center gap-2 text-green-600">
                    <Shield className="w-5 h-5" />
                    <span className="font-medium">Verified Donor</span>
                  </div>
                ) : (
                  <div>
                    <div className="flex items-center gap-2 text-amber-600 mb-3">
                      <Shield className="w-5 h-5" />
                      <span className="font-medium">Pending Verification</span>
                    </div>
                    <p className="text-gray-600 text-sm mb-3">
                      Complete verification to increase trust and get more requests.
                    </p>
                    <Button size="sm" variant="outline" className="w-full">
                      Upload Documents
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}